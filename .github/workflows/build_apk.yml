name: Build Android App

on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      whl-url:
        description: 'URL for Kolibri whl file'
        required: true
  workflow_call:
    inputs:
      whl-file-name:
        required: true
        type: string
      ref:
        description: 'A ref for this workflow to check out its own repo'
        required: true
        type: string
    outputs:
      apk-file-name:
        description: "APK file name"
        value: ${{ jobs.build_apk.outputs.apk-file-name }}

jobs:
  build_apk:
    runs-on: ubuntu-latest
    outputs:
      apk-file-name: ${{ steps.get-apk-filename.outputs.apk-file-name }}
    steps:
    - uses: actions/checkout@v2
      if: ${{ !inputs.ref }}
    - uses: actions/checkout@v2
      if: ${{ inputs.ref }}
      with:
        repository: learningequality/kolibri-android-installer
        ref: ${{ inputs.ref }}
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9
    - uses: actions/cache@v2
      with:
        # This is where python for android puts its intermediary build
        # files - we cache this to improve build performance, but be
        # aggressive in clearing the cache whenever any file changes
        # in the repository, especially as we commit files to this folder
        # too, so we don't want the cache to override these files.
        path: ./python-for-android
        key: ${{ runner.os }}-python-for-android-${{ hashFiles('*') }}
        restore-keys: |
          ${{ runner.os }}-python-for-android-
    - uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Download the whlfile from URL
      if: ${{ github.event.inputs.whl-url }}
      run: make get-whl whl=${{ github.event.inputs.whl-url }}
    - name: Download the whlfile from artifacts
      if: ${{ inputs.whl-file-name }}
      uses: actions/download-artifact@v3
      with:
        name: ${{ inputs.whl-file-name }}
        path: whl
    - name: Install dependencies
      run: pip install -r requirements.txt
    - name: Build the app
      run: |
        # No need to set the ANDROID_HOME environment variable here that is used for
        # setting up the ANDROID SDK and ANDROID NDK, as the github actions images
        # have these SDKs and NDKs already installed.
        # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-Readme.md#environment-variables-3
        export ANDROIDSDK="$ANDROID_SDK_ROOT"
        export ANDROIDNDK=/usr/local/lib/android/sdk/ndk/23.2.8568313
        make kolibri.apk.unsigned
    - name: Get APK filename
      id: get-apk-filename
      run: echo "::set-output name=apk-file-name::$(ls dist | grep .apk | cat)"
    - uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.get-apk-filename.outputs.apk-file-name }}
        path: dist/${{ steps.get-apk-filename.outputs.apk-file-name }}
